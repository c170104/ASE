# Generated by Django 2.1.7 on 2019-03-08 11:13

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_staff', models.BooleanField(default=False, verbose_name='student status')),
                ('is_parent', models.BooleanField(default=False, verbose_name='teacher status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('description', models.CharField(max_length=500)),
                ('dateCreated', models.DateField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('apptTitle', models.CharField(max_length=30)),
                ('apptDescription', models.CharField(max_length=200)),
                ('apptDate', models.DateField()),
                ('apptTimeFrom', models.TimeField()),
                ('apptTimeTo', models.TimeField()),
                ('apptStatus', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], max_length=8)),
            ],
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(default=datetime.datetime(2019, 3, 8, 11, 13, 55, 554647, tzinfo=utc))),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('className', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commentBy', models.CharField(max_length=50)),
                ('commentDate', models.DateField(default=datetime.datetime(2019, 3, 8, 11, 13, 55, 554196, tzinfo=utc))),
                ('commentTime', models.TimeField(default=datetime.datetime(2019, 3, 8, 11, 13, 55, 554216, tzinfo=utc))),
                ('comment', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('description', models.CharField(blank=True, max_length=200, null=True)),
                ('location', models.CharField(max_length=50)),
                ('dateFrom', models.DateField()),
                ('dateTo', models.DateField()),
                ('timeFrom', models.TimeField()),
                ('timeTo', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='EventPlanner',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('contact_number', models.CharField(max_length=20)),
                ('relation', models.CharField(choices=[('Father', 'Father'), ('Mother', 'Mother')], max_length=6)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReportCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='ReportCardPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('examination_type', models.CharField(max_length=20)),
                ('exam_date', models.DateField()),
                ('description', models.CharField(max_length=200)),
                ('acknowledgement', models.BooleanField(default=False)),
                ('reportCard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ReportCard')),
            ],
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=50)),
                ('lastname', models.CharField(max_length=50)),
                ('contact_number', models.CharField(max_length=20)),
                ('form_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Class')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('nric', models.CharField(max_length=9, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=50)),
                ('last_name', models.CharField(max_length=50)),
                ('home_address', models.CharField(max_length=100)),
                ('emergency_contact', models.CharField(max_length=20)),
                ('child_of', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.ParentProfile')),
                ('form_class', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.Class')),
            ],
        ),
        migrations.CreateModel(
            name='StudentToSubjectClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Student')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(max_length=20)),
                ('classOf', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.Class')),
                ('student', models.ManyToManyField(through='main.StudentToSubjectClass', to='main.Student')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.StaffProfile')),
            ],
        ),
        migrations.CreateModel(
            name='SubjectGrade',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subjectName', models.CharField(max_length=50)),
                ('marks', models.DecimalField(decimal_places=1, max_digits=3)),
                ('reportCardPage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ReportCardPage')),
            ],
        ),
        migrations.AddField(
            model_name='studenttosubjectclass',
            name='subjectClass',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.SubjectClass'),
        ),
        migrations.AddField(
            model_name='reportcard',
            name='student',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='main.Student'),
        ),
        migrations.AddField(
            model_name='event',
            name='eventPlanner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.EventPlanner'),
        ),
        migrations.AddField(
            model_name='comment',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Student'),
        ),
        migrations.AddField(
            model_name='attendance',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.Student'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='eventPlanner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.EventPlanner'),
        ),
        migrations.AddField(
            model_name='appointment',
            name='parent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.ParentProfile'),
        ),
        migrations.AlterUniqueTogether(
            name='studenttosubjectclass',
            unique_together={('subjectClass', 'student')},
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('student', 'date')},
        ),
    ]
